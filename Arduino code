#include <ESP8266HTTPClient.h>
#include <ESP8266WiFi.h>

// light info
String ip = "<***BRIDGE IP HERE***>";            // Philips hue bridge ip adress
String user_name = "<***USER_NAME HERE***>";     // Philips hue developer id
int light_id = <***LIGHT ID HERE***>;            // Philips hue light to be controlled 

// wifi info
const char* ssid = "<***SSID HERE***>";           // Router ssid
const char* password = "<***PASSWORD HERE***>";   // Router password 

// Define 
#define  TRIGGER_PIN    <***TRIGGER PIN HERE***>  // PIR pin that goes high when triggerd 
#define  OUT_PIN        LED_BUILTIN  		  // LED to go light up when active

#define  ACTIVE_LEVEL   HIGH         		  // If active set high
#define  STATE_IDLE     0                         // if idle its 0
#define  STATE_ON       1                         // if on its 1
#define  HOLD_MS        45000ul                   // How long we'll hold the output high after being triggered.

// State
bool state = false; // State for light (if TRUE light is on) (if FALSE light is off)


uint32_t
    timeNow,
    timePIR;    
uint8_t
    statePIR;

// Your standard Arduino setup() function.
void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  
  while (WiFi.status() != WL_CONNECTED){
    delay(1000);
    Serial.print(".");
    }
  Serial.println("Connected to the WiFi network");
  pinMode(OUT_PIN, OUTPUT);                       // Setup output pin.          
  digitalWrite(OUT_PIN, LOW);                     // Lets make sure its off.   
  pinMode( TRIGGER_PIN, INPUT );                  // PIR input (assumes actively-driven PIR output)      
  statePIR = STATE_IDLE;
  Serial.print(".");
  }


void loop() {
  timeNow = millis();
  switch(statePIR){
    case STATE_IDLE:
    //waiting for PIR to sense movement
    if(digitalRead(TRIGGER_PIN) == ACTIVE_LEVEL){
      //movement sensed
      //save time now for HOLD_MS interval
      timePIR = timeNow;
      digitalWrite(OUT_PIN, HIGH); 		  // set output pin HIGH
      Serial.println("on");
      switchLight(1, true);                       // send true msg
      statePIR = STATE_ON;                        // move to on state
      }
    break;

    case STATE_ON:
    //if PIR pin is high, reset timer
    if( digitalRead( TRIGGER_PIN ) == ACTIVE_LEVEL )
      timePIR = timeNow;            
    else if( (timeNow - timePIR) >= HOLD_MS ){
      //PIR stayed inactive for HOLD_MS interval
      digitalWrite(OUT_PIN,LOW);                 // set output low
      Serial.println("Off");
      switchLight(1, false);                     // send false message
      statePIR = STATE_IDLE;                     // and return to idle state
      }
    break;
   }
  }


void switchLight(byte room, bool current_state){
  if( WiFi.status()== WL_CONNECTED ){   
    state = current_state;                      // Get state of Light
    HTTPClient http; 
    String req_string;
    // Build req_string 
    req_string = "http://";
    req_string += ip;                           // Bridge ip
    req_string += "/api/";
    req_string += user_name;                    // Philips hue developer id
    req_string += "/lights/";
    req_string += light_id;                     // Light to be controlled
    req_string += "/state";
    Serial.println(req_string);
    http.begin(req_string);
    http.addHeader("Content-Type", "text/plain");

    // Is the light being turned ON or OFF
    String put_string;
    put_string = "{\"on\":";
    put_string += (current_state)? "true" : "false";
    put_string += "}";
  
    int httpResponseCode = http.PUT(put_string);
  
    if(httpResponseCode > 0){
      String response = http.getString();   
      Serial.println(httpResponseCode);
      Serial.println(response);          
      } 
    else {
      Serial.print("Error on sending PUT Request: ");
      Serial.println(httpResponseCode);
      }
    http.end();
    }
  }
